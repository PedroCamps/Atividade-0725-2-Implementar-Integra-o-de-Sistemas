package br.ufg.inf.integrador.processor;

import br.ufg.inf.integrador.model.CrudOperation;
import br.ufg.inf.integrador.model.EstudanteCanonico;
import br.ufg.inf.integrador.model.EstudanteIdMapping;
import br.ufg.inf.integrador.repository.Database;
import br.ufg.inf.integrador.repository.Repositorio;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.Instant;
import java.util.UUID;

/**
 * Processador respons√°vel pela persist√™ncia de dados can√¥nicos e mapeamento de IDs
 * 
 * Implementa o padr√£o Canonical Data Model:
 * - Persiste dados no formato can√¥nico (EstudanteCanonico)
 * - Mant√©m mapeamento de IDs entre sistemas (EstudanteIdMapping)
 * - Garante rastreabilidade e idempot√™ncia das opera√ß√µes
 * 
 * Este processador √© executado AP√ìS o envio HTTP bem-sucedido,
 * garantindo que os dados foram aceitos pelo sistema de destino.
 */
public class PersistenciaCanonicoProcessor implements Processor {
    
    private static final Logger logger = LoggerFactory.getLogger(PersistenciaCanonicoProcessor.class);
    private final Gson gson = new Gson();
    private final EstudanteProcessor estudanteProcessor = new EstudanteProcessor();
    
    // Reposit√≥rios para persist√™ncia can√¥nica
    private final Repositorio<EstudanteCanonico, String> estudanteRepo;
    private final Repositorio<EstudanteIdMapping, String> mappingRepo;
    
    public PersistenciaCanonicoProcessor() {
        // Inicializar banco de dados do integrador
        Database db = new Database("integrador.db");
        
        // Criar reposit√≥rios com publica√ß√£o CRUD desabilitada para evitar loops
        this.estudanteRepo = new Repositorio<>(db, EstudanteCanonico.class);
        this.estudanteRepo.setEnableCrudPublishing(false);
        
        this.mappingRepo = new Repositorio<>(db, EstudanteIdMapping.class);
        this.mappingRepo.setEnableCrudPublishing(false);
        
        logger.info("üíæ Reposit√≥rios can√¥nicos inicializados");
    }
    
    @Override
    public void process(Exchange exchange) throws Exception {
        try {
            // Verificar se deve processar (apenas Estudante/CREATE)
            String entidade = (String) exchange.getProperty("crudEntity");
            String operacao = (String) exchange.getProperty("crudOperation");
            
            if (!"estudante".equalsIgnoreCase(entidade) || !"CREATE".equals(operacao)) {
                logger.debug("‚è≠Ô∏è Pulando persist√™ncia can√¥nica para {}/{}", entidade, operacao);
                return;
            }
            
            logger.info("üíæ Iniciando persist√™ncia can√¥nica para Estudante/CREATE");
            
            // Extrair dados da resposta HTTP (do SB)
            String respostaHttp = exchange.getMessage().getBody(String.class);
            JsonObject jsonResposta = JsonParser.parseString(respostaHttp).getAsJsonObject();
            String idSB = jsonResposta.has("id") ? jsonResposta.get("id").getAsString() : null;
            
            if (idSB == null) {
                logger.warn("‚ö†Ô∏è ID do SB n√£o encontrado na resposta HTTP");
                return;
            }
            
            // Extrair dados da opera√ß√£o original (do SGA)
            CrudOperation operacaoOriginal = (CrudOperation) exchange.getProperty("CrudOriginal");
            String dadosOriginais = operacaoOriginal.getData();
            
            JsonObject jsonOriginal = JsonParser.parseString(dadosOriginais).getAsJsonObject();
            String idSGA = jsonOriginal.has("id") ? jsonOriginal.get("id").getAsString() : null;
            
            if (idSGA == null) {
                logger.warn("‚ö†Ô∏è ID do SGA n√£o encontrado nos dados originais");
                return;
            }
            
            // Gerar ID can√¥nico √∫nico
            String idCanonico = UUID.randomUUID().toString();
            
            logger.info("üîó Correlacionando IDs: Can√¥nico={}, SGA={}, SB={}", 
                       idCanonico, idSGA, idSB);
            
            // Criar e persistir EstudanteCanonico
            EstudanteCanonico estudanteCanonico = estudanteProcessor.estudanteParaEstudanteCanonico(
                dadosOriginais, idCanonico
            );
            
            if (estudanteCanonico == null) {
                logger.error("‚ùå Falha ao criar EstudanteCanonico");
                return;
            }
            
            estudanteRepo.create(estudanteCanonico);
            logger.info("‚úÖ EstudanteCanonico persistido: {}", estudanteCanonico.getIdCanonico());
            
            // Criar e persistir mapeamento de IDs
            EstudanteIdMapping mapeamento = new EstudanteIdMapping();
            mapeamento.setIdCanonico(idCanonico);
            mapeamento.setIdSGA(idSGA);
            mapeamento.setIdSB(idSB);
            mapeamento.setUltimaAtualizacao(Instant.now().toString());
            
            mappingRepo.create(mapeamento);
            logger.info("‚úÖ Mapeamento de IDs persistido: {}", mapeamento);
            
            // Log resumo da opera√ß√£o
            logger.info("üéâ Persist√™ncia can√¥nica conclu√≠da com sucesso:");
            logger.info("   üèõÔ∏è Modelo can√¥nico: {}", estudanteCanonico.getNomeCompleto());
            logger.info("   üîó Correla√ß√£o: SGA({}) ‚Üî Can√¥nico({}) ‚Üî SB({})", 
                       idSGA, idCanonico, idSB);
            
        } catch (Exception e) {
            logger.error("‚ùå Erro na persist√™ncia can√¥nica: {}", e.getMessage(), e);
            // N√£o propagar erro para n√£o quebrar o fluxo principal
            // A integra√ß√£o principal j√° foi bem-sucedida
        }
    }
    
    /**
     * Cleanup de recursos (chamado na finaliza√ß√£o da aplica√ß√£o)
     */
    public void cleanup() {
        try {
            if (estudanteRepo != null) {
                estudanteRepo.getDatabase().close();
            }
            logger.info("üßπ Recursos de persist√™ncia can√¥nica liberados");
        } catch (Exception e) {
            logger.warn("‚ö†Ô∏è Erro ao liberar recursos: {}", e.getMessage());
        }
    }
}